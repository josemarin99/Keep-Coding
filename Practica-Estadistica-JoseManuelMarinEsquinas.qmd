---
format: html
editor: visual
  markdown: 
    wrap: 72
---

Vasmos a cargar el dataset de AirBnB descargado de [aquí](https://public.opendatasoft.com/explore/dataset/airbnb-listings/export/?disjunctive.host_verifications&disjunctive.amenities&disjunctive.features&q=Madrid&dataChart=eyJxdWVyaWVzIjpbeyJjaGFydHMiOlt7InR5cGUiOiJjb2x1bW4iLCJmdW5jIjoiQ09VTlQiLCJ5QXhpcyI6Imhvc3RfbGlzdGluZ3NfY291bnQiLCJzY2llbnRpZmljRGlzcGxheSI6dHJ1ZSwiY29sb3IiOiJyYW5nZS1jdXN0b20ifV0sInhBeGlzIjoiY2l0eSIsIm1heHBvaW50cyI6IiIsInRpbWVzY2FsZSI6IiIsInNvcnQiOiIiLCJzZXJpZXNCcmVha2Rvd24iOiJyb29tX3R5cGUiLCJjb25maWciOnsiZGF0YXNldCI6ImFpcmJuYi1saXN0aW5ncyIsIm9wdGlvbnMiOnsiZGlzanVuY3RpdmUuaG9zdF92ZXJpZmljYXRpb25zIjp0cnVlLCJkaXNqdW5jdGl2ZS5hbWVuaXRpZXMiOnRydWUsImRpc2p1bmN0aXZlLmZlYXR1cmVzIjp0cnVlfX19XSwidGltZXNjYWxlIjoiIiwiZGlzcGxheUxlZ2VuZCI6dHJ1ZSwiYWxpZ25Nb250aCI6dHJ1ZX0%3D&location=16,41.38377,2.15774&basemap=jawg.streets)

![](descargar.png)

```{r}
datos_airbnb<-read.csv('C:\\Users\\jmari\\OneDrive\\Escritorio\\BIG DATA\\Matemáticas 101\\Estadística y datamining\\airbnb-listings.csv',sep = ';')
options(repr.plot.height=4,repr.plot.width=6,repr.plot.res = 300)
```

1.  Vamos a quedarnos con las columnas de mayor interés: 'City','Room.Type','Neighbourhood','Accommodates','Bathrooms','Bedrooms','Beds','Price','Square.Feet','Guests.Included','Extra.People','Review.Scores.Rating','Latitude', 'Longitude' Nos quedarmos solo con las entradas de Madrid para Room.Type=="Entire home/apt" y cuyo barrio (Neighbourhood) no está vacio '' Podemos eliminar las siguientes columnas que ya no son necesarias: "Room.Type",'City' Llama a nuevo dataframe df_madrid.

```{r}
# Selecciono las columnas de interés dentro de mi dataset
columnas_de_interes <- c('City', 'Room.Type', 'Neighbourhood', 'Accommodates', 
             'Bathrooms', 'Bedrooms', 'Beds', 'Price', 
             'Square.Feet', 'Guests.Included', 'Extra.People', 
             'Review.Scores.Rating', 'Latitude', 'Longitude')
datos_airbnb <- datos_airbnb[, columnas_de_interes] 
```

```{r}
# Filtro con las entradas que se nos piden y creo un nuevo dataframe
df_madrid <- datos_airbnb[datos_airbnb$City == "Madrid" & datos_airbnb$Room.Type == "Entire home/apt" & datos_airbnb$Neighbourhood != '', ]
```

```{r}
# Eliminamos las columnas que no son necesarias
library(dplyr)

df_madrid_wo_2col <- df_madrid |> select(-Room.Type, -City)

```

------------------------------------------------------------------------

2.  Crea una nueva columna llamada Square.Meters a partir de Square.Feet. Recuerda que un pie cuadrado son 0.092903 metros cuadrados.

```{r}
# Creo una nueva columna 'Square.Meters' a partir de 'Square.Feet'
df_madrid_wo_2col$Square.Meters <- df_madrid_wo_2col$Square.Feet * 0.092903
df_madrid_con_SM <- df_madrid_wo_2col

```

------------------------------------------------------------------------

3.  ¿Que porcentaje de los apartamentos no muestran los metros cuadrados? Es decir, ¿cuantos tienen NA en Square.Meters?

```{r}
# Contamos cuantos NA tenemos en Square.meters
cantidad_NA <- sum(is.na(df_madrid_con_SM$Square.Meters))
print(cantidad_NA)
```

```{r}
# Contamos el número de filas totales del dataframe
cantidad_total_filas <- nrow(df_madrid_con_SM)
print(cantidad_total_filas)
```

```{r}
# Calculamos el porcentaje
porcentaje_apartamentos_sin_medidas <- (cantidad_NA / cantidad_total_filas) * 100

porcentaje_apartamentos_sin_medidas
```

------------------------------------------------------------------------

4.  De todos los apartamentos que tienen un valor de metros cuadrados diferente de NA ¿Que porcentaje de los apartamentos tienen 0 metros cuadrados?

```{r}
# Filtramos los apartamentos que tienen valores diferentes de NA en metros cuadrados.
apartamentos_con_medidas <- df_madrid_con_SM[!is.na(df_madrid_con_SM$Square.Meters), ]
nrow(apartamentos_con_medidas)
```

```{r}
library(dplyr)
```

```{r}
# Calcular cuántos tienen 0 metros cuadrados
apartamentos_con_cero_metros <- df_madrid_con_SM |>
  filter(Square.Meters == 0)
nrow(apartamentos_con_cero_metros)
```

```{r}
# Calcular el porcentaje
porcentaje_cero_metros <- (nrow(apartamentos_con_cero_metros) / nrow(apartamentos_con_medidas)) * 100
porcentaje_cero_metros
```

------------------------------------------------------------------------

5.  Reemplazar todos los 0m\^2 por NA

```{r}
# Reemplazamos todos los 0 de la columna Square Meters por NA
df_madrid_con_SM$Square.Meters[df_madrid_con_SM$Square.Meters == 0] <- NA
df_madrid_con_SM
```

------------------------------------------------------------------------

Hay muchos NAs, vamos a intentar crear un modelo que nos prediga cuantos son los metros cuadrados en función del resto de variables para tratar de rellenar esos NA. Pero **antes de crear el modelo** vamos a hacer: \* pintar el histograma de los metros cuadrados y ver si tenemos que filtrar algún elemento más. \* crear una variable sintética nueva basada en la similitud entre barrios que usaremos en nuestro modelo.

6.  Pinta el histograma de los metros cuadrados y ver si tenemos que filtrar algún elemento más

```{r}
hist(df_madrid_con_SM$Square.Meters, main = "Histograma de metros cuadrados", xlab = "Metros cuadrados",  ylab = "Conteo",col = "yellow", border = "purple", breaks = 20)  
```

------------------------------------------------------------------------

7.  Asigna el valor NA a la columna Square.Meters de los apartamentos que tengan menos de 20 m\^2

```{r}
df_madrid_con_SM$Square.Meters[df_madrid_con_SM$Square.Meters < 20] <- NA
df_madrid_con_SM_20 <- df_madrid_con_SM
```

------------------------------------------------------------------------

8.  Existen varios Barrios que todas sus entradas de Square.Meters son NA, vamos a eliminar del dataset todos los pisos que pertenecen a estos barrios.

```{r}
df_madrid_con_SM_sin_NA <- df_madrid_con_SM_20[!is.na(df_madrid_con_SM_20$Square.Meters), ]
View(df_madrid_con_SM_sin_NA)
```

```         
------------------------------------------------------------------------
```

9.  ¿Tienen todos los barrios los mismos metros cuadrados de media? ¿Con que test lo comprobarías?

```{r}
# Cargar las librerías necesarias
library(dplyr)
library(ggplot2)
```

```{r}
# Filtrar las columnas necesarias y eliminar valores faltantes
df_barrio_y_SM <- df_madrid_con_SM_sin_NA |>
  select(Neighbourhood, Square.Meters) |>
  filter(!is.na(Neighbourhood) & Neighbourhood != "")
```

```{r}
# Realizar el análisis ANOVA
anovatest <- aov(Square.Meters ~ Neighbourhood, data = df_barrio_y_SM)

# Mostrar el resumen del análisis ANOVA
summary(anovatest)
```
```{r}
# Hacemos una boxplot para analizar la distribución en metros cuadrados por barrio
library(ggplot2)

ggplot(df_barrio_y_SM) +
  geom_boxplot(aes(Neighbourhood, Square.Meters)) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 80, vjust = 0.5)) +
  ggtitle("Distribución en metros cuadrados por barrio") +
  xlab("Barrio") +
  ylab("Metros Cuadrados")

```

------------------------------------------------------------------------

10. Vamos a agrupar los barrios por metros cuadrados. Podemos usar una matriz de similaridad de Tukey. Muestra como de similares o diferentes son los barrios si nos fijámos únicamente en los metros cuadrados de los pisos. ¿Como se diferencia la media del Barrio A al Barrio B? (Es decir, cual sería el pvalor suponiendo una H0 en la que las medias son iguales)

```{r}
# Test de Tukey
tky <- TukeyHSD(anovatest)

# Mostrar resultados
summary(tky)

# Comparamos barrios en la prueba de Tukey
tky_comparison <- tky$Neighbourhood

comparison_ab <- tky_comparison
print(comparison_ab)
```

------------------------------------------------------------------------

11. En el punto anterior has creado una matriz de p-valores que indica como de parecidos son dos barrios. Si su pvalor es bajo significa que los barrios son diferentes, si es alto significa que los barrios se parecen. Esta matriz la podemos usar como matriz de distancia si restamos el pvalor a 1. Es decir si usamos como distancia 1-pvalor. De esta forma barrios con un pvalor alto tendrán una distancia mayor que aquellos con un pvalor bajo. Usando esta última métrica como matriz de distancias dibuja un dendrograma de los diferentes barrios.

```{r}
p_values <- tky$Neighbourhood[, "p adj"]
```

```{r}
neighbourhoods <- unique(df_barrio_y_SM$Neighbourhood)
distance_matrix <- matrix(0, nrow = length(neighbourhoods), ncol = length(neighbourhoods))
rownames(distance_matrix) <- neighbourhoods
colnames(distance_matrix) <- neighbourhoods

for (i in 1:(length(neighbourhoods) - 1)) {
  for (j in (i + 1):length(neighbourhoods)) {
    pair <- paste(neighbourhoods[i], neighbourhoods[j], sep = "-")
    if (pair %in% names(p_values)) {
      distance_matrix[i, j] <- 1 - p_values[pair]
      distance_matrix[j, i] <- distance_matrix[i, j]
    }
  }
}
```

```{r}
# Nos aseguramos de que no haya problemas en la matriz de distancias
if (any(is.na(distance_matrix) | is.nan(distance_matrix) | is.infinite(distance_matrix))) {
  stop
}
```

```{r}
# Convertimos la matriz en un objeto de distancia
dist_obj <- as.dist(distance_matrix)
```

```{r}
# Realizamos el clustering jerárquico
hc <- hclust(dist_obj, method = "complete")
```

```{r}
# Dibujamos el dendrograma
plot(hc, main = "Dendrograma de Barrios basado en metros cuadrados", xlab = "Barrios", sub = "")
```

------------------------------------------------------------------------

10. ¿Que punto de corte sería el aconsejable?, ¿cuantos clusters aparecen?

El punto de corte más adecuado sería en torno al 0.4, apareciendo 5 clusters.

------------------------------------------------------------------------

11. Vamos a crear una nueva columna en el dataframe df_madrid con un nuevo identificador marcado por los clusters obtenidos. Esta columna la llamaremos neighb_id

```{r}
clusters <- cutree(hc, k = 5)
```

```{r}
# Verificar que los nombres de clusters coincidan con los de df_madrid_con_SM
print(setdiff(df_madrid_con_SM$Neighbourhood, names(clusters)))  # Barrios en df_madrid_con_SM que no están en clusters
print(setdiff(names(clusters), df_madrid_con_SM$Neighbourhood))  # Barrios en clusters que no están en df_madrid_con_SM

# Asignar los clusters correctamente
df_madrid_con_SM$neighb_id <- clusters[as.character(df_madrid_con_SM$Neighbourhood)]

# Reemplazar NA solo si es necesario (si hay barrios no agrupados)
df_madrid_con_SM$neighb_id[is.na(df_madrid_con_SM$neighb_id)] <- 0

# Verificar el resultado
table(df_madrid_con_SM$neighb_id)
head(df_madrid_con_SM)

```

------------------------------------------------------------------------

12. Vamos a crear dos grupos, uno test y otro train.

```{r}
set.seed(123)  

# Creamos índices para la división
train_indices <- sample(seq_len(nrow(df_madrid_con_SM)), size = 0.7 * nrow(df_madrid_con_SM))

# Dividimos los datos en train y test
train_data <- df_madrid_con_SM[train_indices, ]
test_data <- df_madrid_con_SM[-train_indices, ]
```

------------------------------------------------------------------------

13. Tratamos de predecir los metros cuadrados en función del resto de columnas del dataframe.

```{r}
library(caret)
```
```{r}
formula <- Square.Meters ~ Accommodates + Bathrooms + Bedrooms + Beds + Price + Guests.Included + Extra.People + Review.Scores.Rating + Latitude + Longitude + neighb_id
train_data <- na.omit(train_data)
model <- train(formula, data = train_data, method = "lm")
predictions <- predict(model, newdata = test_data)
test_data <- test_data[1:length(predictions), ]
test_data$Predicted_Square.Meters <- predictions
View(test_data)
```

------------------------------------------------------------------------
14. Evaluar la calidad de vuestro modelo

Al analizar los valores reales frente a los predichos, se observa que la mayoría de los valores predichos entran en un rango de lo razonablemente aceptable, lo que indica que el modelo realiza predicciones cercanas a los valores reales. Sin embargo, hay algunas desviaciones en apartamentos con valores extremos.
------------------------------------------------------------------------

15. Si tuvieramos un anuncio de un apartamento para 6 personas (Accommodates), con 1 baño, con un precio de 80€/noche y 3 habitaciones en el barrio de Sol, con 3 camas y un review de 80. ¿Cuantos metros cuadrados tendría? Si tu modelo necesita algúna variable adicional puedes inventartela dentro del rango de valores del dataset. ¿Como varía sus metros cuadrados con cada habitación adicional?

```{r}
apartamento_anuncio <- data.frame( Accommodates = 6, Bathrooms = 1, Bedrooms = 3, Beds = 3, Price = 80, Guests.Included = 4, Extra.People = 8, Review.Scores.Rating = 80, Latitude = 40.40737, Longitude = -3.698, neighb_id = clusters[match("Sol", names(clusters))])
```
```{r}
Predicted_Square.Meters <- predict(model, newdata = apartamento_anuncio)
print(Predicted_Square.Meters)
```
```{r}
apartamento_anuncio$Bedrooms <- 2
variacion_con_habitacion_adicional = Predicted_Square.Meters - predict(model, newdata = apartamento_anuncio)
print(variacion_con_habitacion_adicional)
```
------------------------------------------------------------------------

16. Rellenar los Square.Meters con valor NA con el estimado con el modelo anterior. \# Predecir los metros cuadrados para las filas con NA en Square.Meters

```{r}
# Identificamos las filas con valores faltantes en Square.Meters
valores_faltantes <- is.na(df_madrid_con_SM$Square.Meters)

# Predecimos los valores para los datos faltantes
metros_cuadrados_estimados <- predict(model, newdata = df_madrid_con_SM[valores_faltantes, ])

# Asignamos los valores predichos a las posiciones correspondientes
df_madrid_con_SM$Square.Meters[valores_faltantes] <- metros_cuadrados_estimados

# Inspeccionar el dataframe actualizado
df_madrid_con_SM
View(df_madrid_con_SM)

```

------------------------------------------------------------------------
